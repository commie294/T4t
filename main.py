import json
import logging
import os
import shutil
import dotenv
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

print(f"Loaded BOT_TOKEN: {BOT_TOKEN}")

DB_FILE = '/home/venikpes/T4t/db.json'
DB_BACKUP_FILE = '/home/venikpes/T4t/db_backup.json'
DB_RESTORE_FILE = '/home/venikpes/T4t/db_restore.json'

REGISTER, GET_NAME, GET_AGE, GET_GENDER, GET_GENDER_OTHER, GET_PHOTO, GET_BIO, EDIT_PROFILE, EDIT_NAME, EDIT_AGE, EDIT_GENDER, EDIT_GENDER_OTHER, EDIT_CITY, EDIT_PHOTO, EDIT_BIO, REPORT, GET_REPORT_REASON, GET_REPORT_SCREENSHOT, FEEDBACK, GET_FEEDBACK_MESSAGE, GET_FEEDBACK_CONTACT = range(21)

def load_db():
    if os.path.exists(DB_RESTORE_FILE):
        logger.info(f"Restoration file {DB_RESTORE_FILE} found. Applying to {DB_FILE}")
        try:
            shutil.copyfile(DB_RESTORE_FILE, DB_FILE)
            os.remove(DB_RESTORE_FILE)
            logger.info(f"Restored {DB_FILE} from {DB_RESTORE_FILE}")
        except Exception as e:
            logger.error(f"Failed to restore database: {e}")
            raise Exception(f"Database restoration failed: {e}")

    if not os.path.exists(DB_FILE):
        logger.warning(f"Database file {DB_FILE} not found. Initializing new database.")
        default_db = {
            "users": [],
            "blocked": [],
            "likes": [],
            "matches": [],
            "reports": [],
            "feedback": []
        }
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(default_db, f, ensure_ascii=False, indent=2)
        return default_db

    try:
        with open(DB_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        logger.info(f"Successfully loaded database from {DB_FILE}")
        logger.info(f"Number of users in database: {len(data['users'])}")
        if len(data['users']) > 0:
            logger.info(f"Sample user: {data['users'][0]}")
        return data
    except (json.JSONDecodeError, IOError) as e:
        logger.error(f"Failed to load database from {DB_FILE}: {e}")
        if os.path.exists(DB_BACKUP_FILE):
            logger.info(f"Attempting to load backup database from {DB_BACKUP_FILE}")
            try:
                with open(DB_BACKUP_FILE, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                logger.info(f"Successfully loaded backup database")
                logger.info(f"Number of users in backup database: {len(data['users'])}")
                with open(DB_FILE, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                return data
            except (json.JSONDecodeError, IOError) as backup_e:
                logger.error(f"Failed to load backup database: {backup_e}")
        raise Exception(f"Database load failed: {e}. Backup also unavailable or corrupted.")

def save_db(data):
    if os.path.exists(DB_FILE):
        try:
            shutil.copyfile(DB_FILE, DB_BACKUP_FILE)
            logger.info(f"Created backup of database at {DB_BACKUP_FILE}")
        except Exception as e:
            logger.error(f"Failed to create backup of database: {e}")

    try:
        with open(DB_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info(f"Successfully saved database to {DB_FILE}")
    except Exception as e:
        logger.error(f"Failed to save database to {DB_FILE}: {e}")
        raise Exception(f"Database save failed: {e}")

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="menu_register"),
         InlineKeyboardButton("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç", callback_data="menu_browse")],
        [InlineKeyboardButton("üíñ –ú—ç—Ç—á–∏", callback_data="menu_matches"),
         InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_profile")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="menu_edit_profile"),
         InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="menu_feedback")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Received /start from user: {update.effective_user.id}")
    rules = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ T4t Meet!\n\n"
        "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/tperehod\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "1. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        "2. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ –Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å. –ê–Ω–∫–µ—Ç—ã —Ü–∏—Å–≥–µ–Ω–¥–µ—Ä–æ–≤ –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        "3. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ –¥—Ä—É–≥–æ–π –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.\n"
        "4. –°–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(rules, reply_markup=get_main_menu())

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    command = query.data
    logger.info(f"Menu button clicked by user {query.from_user.id}: {command}")

    if command == "menu_register":
        logger.info("Routing to register_start")
        return await register_start(update, context)
    elif command == "menu_browse":
        logger.info("Routing to browse_profiles")
        return await browse_profiles(update, context)
    elif command == "menu_matches":
        logger.info("Routing to matches")
        return await matches(update, context)
    elif command == "menu_profile":
        logger.info("Routing to profile")
        return await profile(update, context)
    elif command == "menu_edit_profile":
        logger.info("Routing to edit_profile")
        return await edit_profile(update, context)
    elif command == "menu_feedback":
        logger.info("Routing to feedback_start")
        return await feedback_start(update, context)
    else:
        logger.warning(f"Unknown menu command: {command}")
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_menu())

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    else:
        chat_id = update.message.chat_id

    logger.info(f"Received /register from user: {update.effective_user.id}")
    db = load_db()
    if any(u['telegram_id'] == update.effective_user.id for u in db['users']):
        await context.bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –∏–ª–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'.", reply_markup=get_main_menu())
        return ConversationHandler.END
    await context.bot.send_message(chat_id, "–í–∞—à–µ –∏–º—è: –∫–∞–∫ –≤–∞—Å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?", reply_markup=ReplyKeyboardRemove())
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Received text message for name input from user {user_id}: {update.message.text}")
    if not update.message.text:
        logger.warning(f"No text received from user {user_id} for name input")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º.")
        return GET_NAME
    context.user_data['name'] = update.message.text
    logger.info(f"Stored name for user {user_id}: {context.user_data['name']}")
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç '{context.user_data['name']}'. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return GET_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"Received text message for age input from user {user_id}: {update.message.text}")
    try:
        age = int(update.message.text)
        if 16 <= age <= 100:
            context.user_data['age'] = age
            logger.info(f"Stored age for user {user_id}: {age}")
            keyboard = [["–¢—Ä–∞–Ω—Å-–∂–µ–Ω—â–∏–Ω–∞"], ["–¢—Ä–∞–Ω—Å-–º—É–∂—á–∏–Ω–∞"], ["–ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞"], ["–î—Ä—É–≥–æ–µ"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text("–ö–µ–º –≤—ã —Å–µ–±—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç–µ?", reply_markup=reply_markup)
            return GET_GENDER
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 100 –ª–µ—Ç).")
            return GET_AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return GET_AGE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    gender = update.message.text
    logger.info(f"Received gender selection from user {user_id}: {gender}")
    context.user_data['gender'] = gender
    if gender == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É –≥–µ–Ω–¥–µ—Ä–Ω—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å.")
        return GET_GENDER_OTHER
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∏–ª–∏ 'Any' –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤):")
    return GET_PHOTO

async def get_gender_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    gender = update.message.text
    logger.info(f"Received custom gender from user {user_id}: {gender}")
    context.user_data['gender'] = gender
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (–∏–ª–∏ 'Any' –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤):")
    return GET_PHOTO

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    city = update.message.text.strip()
    logger.info(f"Received city from user {user_id}: {city}")
    context.user_data['city'] = city if city.lower() != 'any' else None
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")
    return GET_BIO

async def get_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message.photo:
        logger.info(f"Received photo from user {user_id}")
        context.user_data['photo_id'] = update.message.photo[-1].file_id
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –∏ —Ç.–¥.).")
        return REGISTER
    else:
        logger.warning(f"No photo received from user {user_id}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return GET_BIO

async def complete_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"Completing registration for user {user.id}")
    db = load_db()
    profile = {
        'telegram_id': user.id,
        'username': user.username or f"user_{user.id}",
        'name': context.user_data['name'],
        'age': context.user_data['age'],
        'gender': context.user_data['gender'],
        'city': context.user_data['city'],
        'bio': update.message.text,
        'photo_id': context.user_data['photo_id']
    }
    db['users'].append(profile)
    save_db(db)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.", reply_markup=get_main_menu())
    context.user_data.clear()
    return ConversationHandler.END

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    else:
        chat_id = update.message.chat_id

    user_id = update.effective_user.id
    logger.info(f"Showing profile for user: {user_id}")
    db = load_db()
    user_profile = next((u for u in db['users'] if u['telegram_id'] == user_id), None)
    if not user_profile:
        logger.info(f"Profile not found for user {user_id}")
        await context.bot.send_message(chat_id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=get_main_menu())
        return
    logger.info(f"Found profile for user {user_id}: {user_profile}")
    caption = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user_profile['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']}\n"
        f"–ü–æ–ª: {user_profile['gender']}\n"
        f"–ì–æ—Ä–æ–¥: {user_profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–û —Å–µ–±–µ: {user_profile['bio']}"
    )
    await context.bot.send_photo(
        chat_id=chat_id,
        photo=user_profile['photo_id'],
        caption=caption,
        reply_markup=get_main_menu()
    )

async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        message = await context.bot.send_message(chat_id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ?")
    else:
        message = update.message

    logger.info(f"Received edit_profile from user: {update.effective_user.id}")
    keyboard = [
        ["–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ"],
        ["–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ"],
        ["–û—Ç–º–µ–Ω–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await message.reply_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ?", reply_markup=reply_markup)
    return EDIT_PROFILE

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.")
    return EDIT_NAME

async def update_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_name = update.message.text
    user_id = update.effective_user.id
    db = load_db()
    for user in db['users']:
        if user['telegram_id'] == user_id:
            user['name'] = new_name
            break
    save_db(db)
    await update.message.reply_text(f"–í–∞—à–µ –∏–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_name}'.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
    return EDIT_AGE

async def update_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        new_age = int(update.message.text)
        if 16 <= new_age <= 100:
            user_id = update.effective_user.id
            db = load_db()
            for user in db['users']:
                if user['telegram_id'] == user_id:
                    user['age'] = new_age
                    break
            save_db(db)
            await update.message.reply_text(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_age}'.", reply_markup=get_main_menu())
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 100 –ª–µ—Ç).")
            return EDIT_AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return EDIT_AGE

async def edit_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–¢—Ä–∞–Ω—Å-–∂–µ–Ω—â–∏–Ω–∞"], ["–¢—Ä–∞–Ω—Å-–º—É–∂—á–∏–Ω–∞"], ["–ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞"], ["–î—Ä—É–≥–æ–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–ª.", reply_markup=reply_markup)
    return EDIT_GENDER

async def update_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_gender = update.message.text
    if new_gender == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É –≥–µ–Ω–¥–µ—Ä–Ω—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å.")
        return EDIT_GENDER_OTHER
    user_id = update.effective_user.id
    db = load_db()
    for user in db['users']:
        if user['telegram_id'] == user_id:
            user['gender'] = new_gender
            break
    save_db(db)
    await update.message.reply_text(f"–í–∞—à –ø–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_gender}'.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def edit_gender_other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_gender = update.message.text
    user_id = update.effective_user.id
    db = load_db()
    for user in db['users']:
        if user['telegram_id'] == user_id:
            user['gender'] = new_gender
            break
    save_db(db)
    await update.message.reply_text(f"–í–∞—à –ø–æ–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_gender}'.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def edit_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ (–∏–ª–∏ 'Any' –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤).")
    return EDIT_CITY

async def update_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_city = update.message.text.strip()
    user_id = update.effective_user.id
    db = load_db()
    for user in db['users']:
        if user['telegram_id'] == user_id:
            user['city'] = new_city if new_city.lower() != 'any' else None
            break
    save_db(db)
    await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_city or '–ù–µ —É–∫–∞–∑–∞–Ω'}'.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def edit_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")
    return EDIT_PHOTO

async def update_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        new_photo_id = update.message.photo[-1].file_id
        user_id = update.effective_user.id
        db = load_db()
        for user in db['users']:
            if user['telegram_id'] == user_id:
                user['photo_id'] = new_photo_id
                break
        save_db(db)
        await update.message.reply_text("–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=get_main_menu())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return EDIT_PHOTO

async def edit_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")
    return EDIT_BIO

async def update_bio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    new_bio = update.message.text
    user_id = update.effective_user.id
    db = load_db()
    for user in db['users']:
        if user['telegram_id'] == user_id:
            user['bio'] = new_bio
            break
    save_db(db)
    await update.message.reply_text("–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def browse_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    else:
        chat_id = update.message.chat_id

    user_id = update.effective_user.id
    logger.info(f"Received browse_profiles from user: {user_id}")
    db = load_db()
    logger.info(f"Total users in database: {len(db['users'])}")
    user_profile = next((u for u in db['users'] if u['telegram_id'] == user_id), None)
    if not user_profile:
        logger.info(f"User {user_id} not registered")
        await context.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=get_main_menu())
        return
    logger.info(f"User profile: {user_profile}")
    blocked_ids = [b['blocked_id'] for b in db['blocked'] if b['blocker_id'] == user_id]
    logger.info(f"Blocked IDs for user {user_id}: {blocked_ids}")
    profiles = [u for u in db['users'] if u['telegram_id'] != user_id and u['telegram_id'] not in blocked_ids]
    logger.info(f"Profiles after filtering self and blocked: {len(profiles)}")
    if user_profile['age'] < 18:
        profiles = [u for u in profiles if u['age'] < 18]
        logger.info(f"Profiles after age filter (<18): {len(profiles)}")
    else:
        profiles = [u for u in profiles if u['age'] >= 18]
        logger.info(f"Profiles after age filter (>=18): {len(profiles)}")
    if user_profile['city']:
        profiles = [u for u in profiles if u['city'] == user_profile['city'] or u['city'] is None]
        logger.info(f"Profiles after city filter ({user_profile['city']}): {len(profiles)}")
    if not profiles:
        logger.info("No profiles available to browse after all filters")
        await context.bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_main_menu())
        return
    logger.info(f"Available profiles to browse: {profiles}")
    context.user_data['profiles'] = profiles
    context.user_data['current_profile'] = 0
    await show_profile(update, context)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        chat_id = update.message.chat_id
    else:
        chat_id = update.callback_query.message.chat_id

    profiles = context.user_data.get('profiles', [])
    index = context.user_data.get('current_profile', 0)
    if not profiles or index >= len(profiles):
        logger.info("No more profiles to display")
        await context.bot.send_message(chat_id, "–ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_main_menu())
        return
    profile = profiles[index]
    logger.info(f"Displaying profile for user: {profile['telegram_id']}")
    keyboard = [
        [InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f"like_{profile['telegram_id']}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next")],
        [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{profile['telegram_id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=profile['photo_id'],
            caption=f"–ò–º—è: {profile['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n–ü–æ–ª: {profile['gender']}\n–ì–æ—Ä–æ–¥: {profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–û —Å–µ–±–µ: {profile['bio']}",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error displaying profile: {e}")
        await context.bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {e}", reply_markup=get_main_menu())

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    message_id = query.message.message_id
    await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    await context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())

async def like_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received like from user: {query.from_user.id} for user: {query.data}")
    liked_user_id = int(query.data.split('_')[1])
    liking_user_id = query.from_user.id
    db = load_db()
    db['likes'].append({'liker_id': liking_user_id, 'liked_id': liked_user_id})
    if any(l['liker_id'] == liked_user_id and l['liked_id'] == liking_user_id for l in db['likes']):
        db['matches'].append({'user1_id': min(liking_user_id, liked_user_id), 'user2_id': max(liking_user_id, liked_user_id)})
        liked_user = next(u for u in db['users'] if u['telegram_id'] == liked_user_id)
        liking_user = next(u for u in db['users'] if u['telegram_id'] == liking_user_id)
        await context.bot.send_message(liked_user_id, f"–£ –≤–∞—Å –º—ç—Ç—á —Å {liking_user['name']}!")
        await context.bot.send_message(liking_user_id, f"–£ –≤–∞—Å –º—ç—Ç—á —Å {liking_user['name']}!")
    save_db(db)
    keyboard = [
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next")],
        [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{liked_user_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(
        caption=f"{query.message.caption}\n\n‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!",
        reply_markup=reply_markup
    )

async def next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received next from user: {query.from_user.id}")
    context.user_data['current_profile'] = context.user_data.get('current_profile', 0) + 1
    profiles = context.user_data.get('profiles', [])
    index = context.user_data['current_profile']
    if index >= len(profiles):
        await query.message.delete()
        await query.message.reply_text("–ù–µ—Ç –±–æ–ª—å—à–µ –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=get_main_menu())
        return
    profile = profiles[index]
    keyboard = [
        [InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f"like_{profile['telegram_id']}")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data="next")],
        [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{profile['telegram_id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_media(
        media=InputMediaPhoto(
            media=profile['photo_id'],
            caption=f"–ò–º—è: {profile['name']}\n–í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n–ü–æ–ª: {profile['gender']}\n–ì–æ—Ä–æ–¥: {profile['city'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–û —Å–µ–±–µ: {profile['bio']}"
        ),
        reply_markup=reply_markup
    )

async def report_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received report from user: {query.from_user.id} for user: {query.data}")
    reported_user_id = int(query.data.split('_')[1])
    context.user_data['reported_user_id'] = reported_user_id
    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã.")
    return GET_REPORT_REASON

async def get_report_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['report_reason'] = update.message.text
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –Ω–∞—Ä—É—à–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–ø–∏—Å–∫–∞ –∏–ª–∏ –∞–Ω–∫–µ—Ç–∞).")
    return GET_REPORT_SCREENSHOT

async def get_report_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        return GET_REPORT_SCREENSHOT

    screenshot_id = update.message.photo[-1].file_id
    reason = context.user_data.get('report_reason')
    reporter_user_id = update.message.from_user.id
    reported_user_id = context.user_data.get('reported_user_id')
    
    if reported_user_id:
        db = load_db()
        db['reports'].append({
            'reporter_id': reporter_user_id,
            'reported_id': reported_user_id,
            'reason': reason,
            'screenshot_id': screenshot_id
        })
        db['blocked'].append({'blocker_id': reporter_user_id, 'blocked_id': reported_user_id})
        save_db(db)
        await update.message.reply_text("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.")
        if ADMIN_CHAT_ID:
            reporter_user = next((u for u in db['users'] if u['telegram_id'] == reporter_user_id), None)
            reported_user = next((u for u in db['users'] if u['telegram_id'] == reported_user_id), None)
            if reporter_user and reported_user:
                keyboard = [
                    [InlineKeyboardButton("–ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"ban_{reported_user_id}")],
                    [InlineKeyboardButton("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∂–∞–ª–æ–±—É", callback_data=f"ignore_{reported_user_id}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                reporter_link = f"tg://user?id={reporter_user_id}"
                reported_link = f"tg://user?id={reported_user_id}"
                message = (
                    f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:\n"
                    f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reporter_user['name']} (ID: {reporter_user_id}, [–ü—Ä–æ—Ñ–∏–ª—å]({reporter_link}))\n"
                    f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {reported_user['name']} (ID: {reported_user_id}, [–ü—Ä–æ—Ñ–∏–ª—å]({reported_link}))\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                )
                await context.bot.send_photo(
                    chat_id=ADMIN_CHAT_ID,
                    photo=screenshot_id,
                    caption=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã.")
        return ConversationHandler.END

async def ban_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received ban request from admin for user: {query.data}")
    user_id = int(query.data.split('_')[1])
    db = load_db()
    if any(u['telegram_id'] == user_id for u in db['users']):
        db['users'] = [u for u in db['users'] if u['telegram_id'] != user_id]
        db['blocked'].append({'blocker_id': int(ADMIN_CHAT_ID), 'blocked_id': user_id})
        save_db(db)
        await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
    else:
        await query.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await query.message.delete()

async def ignore_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"Received ignore request for report on user: {query.data}")
    user_id = int(query.data.split('_')[1])
    await query.message.reply_text(f"–ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
    await query.message.delete()

async def feedback_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
        message = await context.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É.")
    else:
        message = update.message

    logger.info(f"Starting feedback process for user: {update.effective_user.id}")
    await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É.", reply_markup=ReplyKeyboardRemove())
    return GET_FEEDBACK_MESSAGE

async def get_feedback_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['feedback_message'] = update.message.text
    logger.info(f"Received feedback message from user {update.effective_user.id}: {update.message.text}")
    await update.message.reply_text("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –º—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –≤–∞–º–∏, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram @username). –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'.")
    return GET_FEEDBACK_CONTACT

async def get_feedback_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.text
    feedback_message = context.user_data.get('feedback_message')
    user_id = update.message.from_user.id
    db = load_db()
    feedback_entry = {
        'user_id': user_id,
        'message': feedback_message,
        'contact': contact if contact.lower() != '–Ω–µ—Ç' else None
    }
    db['feedback'].append(feedback_entry)
    save_db(db)
    logger.info(f"Feedback saved for user {user_id}")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=get_main_menu())
    if ADMIN_CHAT_ID:
        user = next((u for u in db['users'] if u['telegram_id'] == user_id), None)
        user_name = user['name'] if user else f"ID {user_id}"
        user_link = f"tg://user?id={user_id}"
        message = (
            f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n"
            f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} ([–ü—Ä–æ—Ñ–∏–ª—å]({user_link}))\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {feedback_message}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact if contact.lower() != '–Ω–µ—Ç' else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
        await context.bot.send_message(ADMIN_CHAT_ID, message, parse_mode="Markdown")
    context.user_data.clear()
    return ConversationHandler.END

async def matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        message_id = query.message.message_id
        await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
    else:
        chat_id = update.message.chat_id

    user_id = update.effective_user.id
    db = load_db()
    user_matches = [m for m in db['matches'] if m['user1_id'] == user_id or m['user2_id'] == user_id]
    if not user_matches:
        await context.bot.send_message(chat_id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π.", reply_markup=get_main_menu())
        return
    message = "–í–∞—à–∏ –º—ç—Ç—á–∏:\n"
    keyboard = []
    for match in user_matches:
        other_id = match['user2_id'] if match['user1_id'] == user_id else match['user1_id']
        other_user = next(u for u in db['users'] if u['telegram_id'] == other_id)
        message += f"- {other_user['name']} (–í–æ–∑—Ä–∞—Å—Ç: {other_user['age']}, –ü–æ–ª: {other_user['gender']})\n"
        keyboard.append([InlineKeyboardButton(f"–ù–∞—á–∞—Ç—å —á–∞—Ç —Å {other_user['name']}", callback_data=f"chat_{other_id}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id, message, reply_markup=reply_markup)

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    matched_user_id = int(query.data.split('_')[1])
    db = load_db()
    matched_user = next((u for u in db['users'] if u['telegram_id'] == matched_user_id), None)
    if matched_user:
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{matched_user['username']}. –ù–∞–π–¥–∏—Ç–µ –µ–≥–æ –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç!", reply_markup=get_main_menu())
    else:
        await query.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu())

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu())
    return ConversationHandler.END

async def ignore_non_admin_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Ignoring message in admin chat from user {update.effective_user.id}: {update.message.text}")
    return

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    logger.info("Bot started")

    register_handler = ConversationHandler(
        entry_points=[
            CommandHandler("register", register_start),
            CallbackQueryHandler(register_start, pattern='^menu_register$')
        ],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            GET_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            GET_GENDER_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender_other)],
            GET_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_photo)],
            GET_BIO: [MessageHandler(filters.PHOTO, get_bio)],
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, complete_registration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    edit_profile_handler = ConversationHandler(
        entry_points=[CommandHandler("edit_profile", edit_profile)],
        states={
            EDIT_PROFILE: [
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è.*"), edit_name),
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç.*"), edit_age),
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª.*"), edit_gender),
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.*"), edit_city),
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.*"), edit_photo),
                MessageHandler(filters.Regex(".*–ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ.*"), edit_bio),
                MessageHandler(filters.Regex(".*–û—Ç–º–µ–Ω–∞.*"), cancel_edit),
            ],
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_name)],
            EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_age)],
            EDIT_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_gender)],
            EDIT_GENDER_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_gender_other)],
            EDIT_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_city)],
            EDIT_PHOTO: [MessageHandler(filters.PHOTO, update_photo)],
            EDIT_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, update_bio)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    report_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(report_profile, pattern='^report_')],
        states={
            GET_REPORT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_report_reason)],
            GET_REPORT_SCREENSHOT: [MessageHandler(filters.ALL, get_report_screenshot)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    feedback_handler = ConversationHandler(
        entry_points=[
            CommandHandler("feedback", feedback_start),
            CallbackQueryHandler(feedback_start, pattern='^menu_feedback$')
        ],
        states={
            GET_FEEDBACK_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_feedback_message)],
            GET_FEEDBACK_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_feedback_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(register_handler)
    application.add_handler(edit_profile_handler)
    application.add_handler(report_handler)
    application.add_handler(feedback_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("browse", browse_profiles))
    application.add_handler(CommandHandler("matches", matches))
    application.add_handler(CallbackQueryHandler(menu_handler, pattern='^menu_'))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern='^back_to_menu$'))
    application.add_handler(CallbackQueryHandler(like_profile, pattern='^like_'))
    application.add_handler(CallbackQueryHandler(next_profile, pattern='^next$'))
    application.add_handler(CallbackQueryHandler(start_chat, pattern='^chat_'))
    application.add_handler(CallbackQueryHandler(ban_user, pattern='^ban_'))
    application.add_handler(CallbackQueryHandler(ignore_report, pattern='^ignore_'))
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & filters.Chat(int(ADMIN_CHAT_ID)),
        ignore_non_admin_messages
    ))

    application.run_polling()

if __name__ == '__main__':
    main()
