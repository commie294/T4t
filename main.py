import sqlite3
import random
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN_MEET")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
if not BOT_TOKEN or not ADMIN_CHAT_ID:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN_MEET –∏–ª–∏ ADMIN_CHAT_ID.")
    exit()

DATABASE_NAME = 't4t_meet.db'

REGISTER, GET_NAME, GET_AGE, GET_GENDER, GET_GENDER_OTHER, GET_PHOTO, GET_BIO = range(7)
REPORT, GET_REPORT_REASON = range(7, 9)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    rules = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ T4t Meet!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n"
        "1. –ë—É–¥—å—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.\n"
        "2. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –∏ –Ω–µ—Ç–µ—Ä–ø–∏–º–æ—Å—Ç—å. –ê–Ω–∫–µ—Ç—ã —Ü–∏—Å–≥–µ–Ω–¥–µ—Ä–æ–≤ –±—É–¥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        "3. –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç 18+ –∏ –¥—Ä—É–≥–æ–π –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.\n"
        "4. –°–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª—è—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "/browse - –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "/matches - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –º—ç—Ç—á–µ–π.\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∂–µ).\n"
    )

    keyboard = [
        [KeyboardButton("/register")],
        [KeyboardButton("/browse"), KeyboardButton("/matches")],
        [KeyboardButton("/profile")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(rules, reply_markup=reply_markup)

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏?")
    return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–µ –∏–º—è –±—É–¥–µ—Ç '{context.user_data['name']}'. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    return GET_AGE

async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        age = int(update.message.text)
        print(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        if 16 <= age <= 100:
            context.user_data['age'] = age
            keyboard = [["–¢—Ä–∞–Ω—Å-–∂–µ–Ω—â–∏–Ω–∞"], ["–¢—Ä–∞–Ω—Å-–º—É–∂—á–∏–Ω–∞"], ["–ù–µ–±–∏–Ω–∞—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞"], ["–î—Ä—É–≥–æ–µ"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text("–ö–µ–º –≤—ã —Å–µ–±—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç–µ?", reply_markup=reply_markup)
            print(f"–í–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {GET_GENDER}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return GET_GENDER
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 16 –¥–æ 100 –ª–µ—Ç).")
            print(f"–í–æ–∑—Ä–∞—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {GET_AGE}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
            return GET_AGE
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        print(f"–û—à–∏–±–∫–∞ ValueError, –≤–æ–∑–≤—Ä–∞—â–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {GET_AGE}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        return GET_AGE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gender'] = update.message.text
    if context.user_data['gender'] == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à—É –≥–µ–Ω–¥–µ—Ä–Ω—É—é –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å.")
        return GET_GENDER_OTHER
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")
    return GET_PHOTO

async def get_gender_other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['gender'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ. –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–æ—Ñ–∏–ª—è.")
    return GET_PHOTO

async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.photo:
        photo = update.message.photo[-1]
        context.user_data['photo_id'] = photo.file_id
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –∏ —Ç.–¥.).")
        return GET_BIO
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return GET_PHOTO

async def get_bio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['bio'] = update.message.text
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO users (user_id, name, age, gender, bio, photo_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (update.message.from_user.id, context.user_data['name'], context.user_data['age'],
          context.user_data['gender'], context.user_data['bio'], context.user_data['photo_id']))
    conn.commit()
    conn.close()
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
    context.user_data.clear()
    return ConversationHandler.END

async def browse_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
    profile = cursor.fetchone()
    conn.close()

    if profile:
        user_id_browse, name, age, gender, bio, photo_id, _, _ = profile
        keyboard = [
            [InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f'like_{user_id_browse}')],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data='next')],
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f'report_{user_id_browse}')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        media = InputMediaPhoto(media=photo_id, caption=f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–û —Å–µ–±–µ: {bio}")
        await context.bot.send_media_group(chat_id=update.message.chat_id, media=[media], reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

async def like_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    liked_user_id = int(query.data.split('_')[1])
    liking_user_id = query.from_user.id

    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO matches (user_id_1, user_id_2) VALUES (?, ?)", (liking_user_id, liked_user_id))
    conn.commit()

    cursor.execute("SELECT id FROM matches WHERE user_id_1 = ? AND user_id_2 = ?", (liked_user_id, liking_user_id))
    if cursor.fetchone():
        cursor.execute("UPDATE matches SET is_match = TRUE WHERE user_id_1 = ? AND user_id_2 = ?", (liking_user_id, liked_user_id))
        cursor.execute("UPDATE matches SET is_match = TRUE WHERE user_id_1 = ? AND user_id_2 = ?", (liked_user_id, liking_user_id))
        conn.commit()
        user_info_liked = get_user_info(liked_user_id)
        user_info_liking = get_user_info(liking_user_id)
        if user_info_liked and user_info_liking:
            await context.bot.send_message(chat_id=liked_user_id, text=f"–£ –≤–∞—Å –º—ç—Ç—á —Å {user_info_liking[0]}!")
            await context.bot.send_message(chat_id=liking_user_id, text=f"–£ –≤–∞—Å –º—ç—Ç—á —Å {user_info_liked[0]}!")

    conn.close()
    keyboard = [[InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data='next')],
                [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f'report_{liked_user_id}')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_caption(caption=query.message.caption_text + "\n\n‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!", reply_markup=reply_markup)

async def next_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id != ? ORDER BY RANDOM() LIMIT 1", (user_id,))
    profile = cursor.fetchone()
    conn.close()

    if profile:
        user_id_browse, name, age, gender, bio, photo_id, _, _ = profile
        keyboard = [
            [InlineKeyboardButton("üëç –õ–∞–π–∫", callback_data=f'like_{user_id_browse}')],
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞", callback_data='next')],
            [InlineKeyboardButton("‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f'report_{user_id_browse}')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        media = InputMediaPhoto(media=photo_id, caption=f"–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–û —Å–µ–±–µ: {bio}")
        await context.bot.edit_message_media(media=media, chat_id=query.message.chat_id, message_id=query.message.message_id, reply_markup=reply_markup)
    else:
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.", reply_markup=None)

async def report_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    reported_user_id = int(query.data.split('_')[1])
    context.user_data['reported_user_id'] = reported_user_id
    await context.bot.send_message(query.message.chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã.")
    return GET_REPORT_REASON

async def get_report_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reason = update.message.text
    reporter_user_id = update.message.from_user.id
    reported_user_id = context.user_data.get('reported_user_id')

    if reported_user_id:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("INSERT INTO reports (reporter_user_id, reported_user_id, reason) VALUES (?, ?, ?)",
                       (reporter_user_id, reported_user_id, reason))
        conn.commit()
        conn.close()

        await update.message.reply_text("–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.")

        if ADMIN_CHAT_ID:
            try:
                user_info_reporter = get_user_info(reporter_user_id)
                user_info_reported = get_user_info(reported_user_id)
                if user_info_reporter and user_info_reported:
                    await context.bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=f"–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞:\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {reporter_user_id} ({user_info_reporter[0]})\n–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {reported_user_id} ({user_info_reported[0]})\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–ª–æ–±—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def show_matches(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT u.name, u.user_id
        FROM matches m
        JOIN users u ON (m.user_id_1 = u.user_id OR m.user_id_2 = u.user_id) AND u.user_id != ?
        WHERE m.is_match = TRUE AND (m.user_id_1 = ? OR m.user_id_2 = ?)
    """, (user_id, user_id, user_id))
    matches = cursor.fetchall()
    conn.close()

    if matches:
        message = "–í–∞—à–∏ –º—ç—Ç—á–∏:\n"
        keyboard = []
        for name, matched_user_id in matches:
            message += f"- {name}\n"
            keyboard.append([InlineKeyboardButton(f"–ù–∞—á–∞—Ç—å —á–∞—Ç —Å {name}", callback_data=f'chat_{matched_user_id}')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π.")

async def start_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    matched_user_id = int(query.data.split('_')[1])
    await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {matched_user_id}. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ Telegram –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É.")

def get_user_info(user_id: int) -> tuple or None:
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM users WHERE user_id = ?", (user_id,))
    user_info = cursor.fetchone()
    conn.close()
    return user_info

def setup_registration_conversation():
    return ConversationHandler(
        entry_points=[CommandHandler("register", register_start)],
        states={
            REGISTER: [MessageHandler(filters.COMMAND, register_start)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_AGE: [MessageHandler(filters.TEXT & ~filters.TEXT, get_age)],
            GET_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender)],
            GET_GENDER_OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gender_other)],
            GET_PHOTO: [MessageHandler(filters.PHOTO, get_photo)],
            GET_BIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bio)],
        },
        fallbacks=[],
    )

def setup_browsing():
    return [
        CommandHandler("browse", browse_profiles),
        CallbackQueryHandler(like_profile, pattern='^like_'),
        CallbackQueryHandler(next_profile, pattern='^next$'),
        CallbackQueryHandler(report_profile, pattern='^report_'),
    ]

def setup_matches():
    return [
        CommandHandler("matches", show_matches),
        CallbackQueryHandler(start_chat, pattern='^chat_'),
    ]

def setup_report_conversation():
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(report_profile, pattern='^report_')],
        states={
            GET_REPORT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_report_reason)],
        },
        fallbacks=[],
    )

def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()
    reg_handler = setup_registration_conversation()
    browse_handlers = setup_browsing()
    matches_handlers = setup_matches()
    report_handler = setup_report_conversation()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(reg_handler)
    application.add_handlers(browse_handlers)
    application.add_handlers(matches_handlers)
    application.add_handler(report_handler)

    application.run_polling()

if __name__ == "__main__":
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
    if not os.path.exists(DATABASE_NAME):
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                age INTEGER NOT NULL,
                gender TEXT NOT NULL,
                bio TEXT,
                interests TEXT,
                seeking_gender TEXT,
                seeking_age_min INTEGER,
                seeking_age_max INTEGER,
                photo_id TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS matches (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id_1 INTEGER NOT NULL,
                user_id_2 INTEGER NOT NULL,
                is_match BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id_1) REFERENCES users(user_id),
                FOREIGN KEY (user_id_2) REFERENCES users(user_id)
            )
        """)
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                reporter_user_id INTEGER NOT NULL,
                reported_user_id INTEGER NOT NULL,
                reason TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (reporter_user_id) REFERENCES users(user_id),
                FOREIGN KEY (reported_user_id) REFERENCES users(user_id)
            )
        """)
        conn.commit()
        conn.close()

    main()
